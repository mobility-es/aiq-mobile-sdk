#!/usr/bin/env node

'use strict';

var pkg = require('../package.json'),

    Table = require('cli-table'),
    moment = require('moment'),

    path = require('path'),

    program = require('../lib/commander'),
    utils = require('../lib/utils'),
    services = new (require('../lib/services'))(path.join(utils.getUserHome(), '.aiqrc'), process.cwd());

process.title = pkg.name;

function processArguments (proxyTo, successCallbackOrText) {
    return function () {
        var args = arguments,
            authInfo = args[args.length - 1];

        function handle () {
            proxyTo.apply(services, args).then(
                function () {
                    if (typeof successCallbackOrText === 'function') {
                        successCallbackOrText.apply(null, arguments);
                    } else {
                        utils.info.call(null, successCallbackOrText);
                    }
                },
                utils.error
            );
        }

        // New Auth info provided
        if (authInfo.orgName && authInfo.username) {
            services.requestToken(authInfo).then(handle, utils.error);
        } else {
            handle();
        }
    };
}

var serverUrlDescr = 'platform URL. If not provided, AIQ development environment (' + pkg.defaults.server + ') will be used',
    pathUsage = [
        '[options] [<path>]',
        '',
        '    <path>: The path to the application folder. If not specified, the current working directory will be used.'
    ].join('\n');

program
    .option('-v, --version', 'output the AIQ mobile sdk version', function () {
        console.log(pkg.version);
        process.exit(0);
    })
    .on('*', function () {
        console.error('\n  error: command doesn\'t exist `%s\'\n', arguments[0]);
        process.exit(1);
    });

program
    .command('login [serverUrl]')
    .description('authenticate against the platform and stores the access token')
    .longDescription('This command authenticates against the platform and stores the access token.')
    .usage('-o <orgName> -u <username> -p <password> [<serverUrl>]\n\t<serverUrl>  ' + serverUrlDescr)
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .action(function (serverUrl) {
        //HACK: in case of wrong call eg. "login -o org -p password -us ername"
        // "arguments" object will contain more that 1 element,
        // i.e. it is not safe to retrieve "params" object as regular func parameter
        var params = arguments[arguments.length - 1];

        params.serverUrl = serverUrl || pkg.defaults.server;

        // Check existence of required options
        params.options.forEach(function (param) {
            var argName = param.long.replace('--', '');
            if (param.required && !params[argName]) {
                console.error('\n  error: missing required option `%s\'\n', param.long);
                process.exit(1);
            }
        });

        services.login(params).then(function () {
            utils.info('AccessToken successfully stored for the future calls.');
        }, utils.error);
    });

program
    .command('logout')
    .description('destroy the stored access token')
    .longDescription('')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl [serverUrl]', serverUrlDescr, pkg.defaults.server)
    .action(processArguments(services.logout, 'AccessToken successfully removed.'));

program
    .command('list')
    .description('display list of apps on platform')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl [serverUrl]', serverUrlDescr, pkg.defaults.server)
    .action(processArguments(services.getAppsList, function (result) {
        if (!result.length) {
            utils.info('There are no applications in the platform yet.');
            return;
        }

        var table = new Table({
            head: ['ID', 'Rev', 'Name', 'Modified on', 'API', 'Mock?', 'Global?']
        });

        // Apply Name-based sorting
        result.sort(function (a, b) {
            return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
        });

        result.forEach(function (app) {
            table.push([
                app._id,
                app._rev,
                app.name,
                app.lastModified ? moment(app.lastModified).fromNow() : 'N/A',
                app.minJsApiLevel || 0,
                app.mock ? 'Yes'.warn : 'No'.info,
                app.global ? 'Yes'.warn : 'No'.info
            ]);
        });
        console.log(table.toString());
    }));

program
    .command('publish [path]')
    .usage(pathUsage)
    .description('publish a new app to platform')
    .longDescription('This command registers a new application on platform and deploys the content of the application folder as a new app.') // jshint ignore:line
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock', 'enable mock mode')
    .option('-g, --global', 'make the application global, so all users in the organization can access it')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl [serverUrl]', serverUrlDescr, pkg.defaults.server)
    .note('A new app will be always created on platform and the app manifest file will be created/updated according to provided parameters.') // jshint ignore:line
    .action(processArguments(services.registerApp, function (appInfo) {
        utils.info('New App [%s] with ID: %s was successfully created.', appInfo.name, appInfo.id);
    }));

program
    .command('update [path]')
    .usage(pathUsage)
    .description('update an existing app')
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock', 'enable mock mode')
    .option('-g, --global', 'make the application global, so all users in the organization can access it')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl [serverUrl]', serverUrlDescr, pkg.defaults.server)
    .action(processArguments(services.updateApp, function (appInfo) {
        utils.info('App [%s] with ID: %s was successfully updated.', appInfo.name, appInfo.id);
    }));

program
    .command('unpublish [path]')
    .usage(pathUsage)
    .description('remove specific app from platform')
    .longDescription('This command removes an application from the platform and consequently form mobile devices. It also removes the app id from the app manifest file.') // jshint ignore:line
    .option('-i, --id <application id>', 'application id. If not specified, will be read from the manifest file')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl [serverUrl]', serverUrlDescr, pkg.defaults.server)
    .note('If the provided application id is different from the id in the app manifest file, the app id will NOT be removed from the app manifest file.') // jshint ignore:line
    .action(processArguments(services.deleteApp, function (appInfo) {
        utils.info('App with ID: %s was successfully removed from the platform.', appInfo.id);
    }));

program
    .command('run [path]')
    .usage(pathUsage)
    .description('run the app on a local WebServer')
    .longDescription('This command runs the application on a local web server, so it can be tested in browser in mock mode.')
    .option('-p, --port <n>', 'port number, default is 8000', 8000)
    .action(function (path, params) {
        services.server(params.port, path)
            .then(function () {
                utils.info('WebServer successfully started at http://localhost:%d/\nPress <CTRL> + <C> to shutdown.', params.port);
            }, utils.error);
    });

program.parse(process.argv);

if (!program.args.length) {
    program.help();
}
