#!/usr/bin/env node

'use strict';

var pkg = require('../package.json'),

    updateNotifier = require('update-notifier'),
    Table = require('cli-table'),
    moment = require('moment'),
    jsesc = require('jsesc'),

    url = require('url'),
    path = require('path'),

    program = require('../lib/commander'),
    utils = require('../lib/utils'),
    services = new (require('../lib/services'))(path.join(utils.getUserHome(), '.aiqrc'), process.cwd());

process.title = pkg.name;

var pathUsage = [
        '[options] [<path>]',
        '',
        '    <path>: The path to the application folder. If not specified, the current working directory will be used.'
    ].join('\n');

program
    .option('-v, --version', 'output the AIQ mobile sdk version', function () {
        console.log(pkg.version);
        process.exit(0);
    })
    .on('*', function () {
        console.error('\n  error: command doesn\'t exist `%s\'\n', arguments[0]);
        this.help();
        process.exit(1);
    });

program
    .command('user')
    .description('display information about the current session')
    .longDescription('This command display information about the current session.')
    .action(function () {
        var info = services.getInfo();
        if (info) {
            var table = new Table();

            table.push(['Server', info.serverUrl]);
            table.push(['Organization', info.orgName]);
            table.push(['Username', info.username]);

            console.log(table.toString());
        } else {
            utils.error('Client doesn\'t seem to be authorized.');
            process.exit(1);
        }
    });

program
    .command('login')
    .description('authenticate against the platform and stores the access token')
    .longDescription('This command authenticates against the platform and stores the access token.')
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .option('-s, --serverUrl <serverUrl>', 'platform URL. If not provided, AIQ development environment (' + pkg.defaults.server + ') will be used') // jshint ignore:line
    .action(function () {

        //HACK: to support Commander
        var params = arguments[arguments.length - 1];

        params.serverUrl = params.serverUrl || pkg.defaults.server;

        var protocol = url.parse(params.serverUrl).protocol;
        if (protocol !== 'https:' && protocol !== 'http:') {
            utils.error('Invalid Server\'s URL.');
            process.exit(1);
        }

        // Check existence of required options
        params.options.forEach(function (param) {
            var argName = param.long.replace('--', '');
            if (param.required && !params[argName]) {
                console.error('\n  error: missing required option `%s\'', param.long);
                params.help();
                process.exit(1);
            }
        });

        services.login(params).then(function () {
            utils.info('AccessToken successfully stored for the future calls.');
        }, utils.error);
    });

program
    .command('logout')
    .description('destroy the stored access token')
    .longDescription('This command destroys the stored access token.')
    .action(function () {
        services.logout().then(function () {
            utils.info('AccessToken successfully removed.');
        }, utils.error);
    });

program
    .command('list')
    .description('display the list of apps on the platform')
    .longDescription('This command displays the list of applications on the platform.')
    .action(function () {
        services.getAppsList().then(function (result) {

            if (!result.length) {
                utils.info('There are no applications in the platform yet.');
                return;
            }

            var table = new Table({
                head: ['ID', 'Rev', 'Name', 'Modified on', 'API', 'Mock?', 'Global?']
            });

            // Apply Name-based sorting
            result.sort(function (a, b) {
                return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
            });

            result.forEach(function (app) {
                table.push([
                    app._id,
                    app._rev,
                    jsesc(app.name),
                    app.lastModified ? moment(app.lastModified).fromNow() : 'N/A',
                    app.minJsApiLevel || 0,
                    app.mock ? 'Yes'.warn : 'No'.info,
                    app.global ? 'Yes'.warn : 'No'.info
                ]);
            });
            console.log(table.toString());

        }, utils.error);
    });

program
    .command('generate [path]')
    .usage([
        '[options] [<path>]',
        '',
        '    <path>: The path to the workspace folder. If not specified, the current working directory will be used.'
    ].join('\n'))
    .description('generate a boilerplate app')
    .option('-n, --name <app name>', 'name of the application. Note that depending on your organization settings, app name might or might not have to be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, the latest Api Level will be used') // jshint ignore:line
    .action(function (path) {
        //HACK: to support Commander
        var params = arguments[arguments.length - 1],
            name = (params.name || '').trim();

        params.path = path;

        services.generateApp(name, params).then(function (appInfo) {
            utils.info('Skeleton App [%s] was successfully created.', appInfo.name);
        }, utils.error);
    });

program
    .command('publish [path]')
    .usage(pathUsage)
    .description('publish a new app to the platform')
    .longDescription('This command registers a new application on platform and deploys the content of the application folder as a new app.')
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not have to be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock <true|false>', 'enable mock mode')
    .option('-g, --global', 'make the application global, so all users in the organization can access it')
    .note('A new app will be always created on platform and the app manifest file will be created/updated according to provided parameters.') // jshint ignore:line
    .action(function (path) {
        //HACK: to support Commander
        var params = arguments[arguments.length - 1];
        params.path = path;
        services.registerApp(params).then(function (appInfo) {
            utils.info('New App [%s] with ID: %s was successfully created.', appInfo.name, appInfo.id);
        }, utils.error);
    });

program
    .command('update [path]')
    .usage(pathUsage)
    .description('update an existing app')
    .option('-i, --id <app id>', 'application id. To find out what is your application id use "aiq list" command')
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not have to be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock <true|false>', 'enable mock mode')
    .option('-g, --global ', 'make the application global, so all users in the organization can access it')
    .action(function (path) {
        //HACK: to support Commander
        var params = arguments[arguments.length - 1],
            id = (params.id || '').trim();

        if (!id) {
            console.error('\n  error: missing required option `id\'');
            params.help();
            process.exit(1);
        }

        params.path = path;

        services.updateApp(id, params).then(function (appInfo) {
            utils.info('App [%s] with ID: %s was successfully updated.', jsesc(appInfo.name), appInfo.id);
        }, utils.error);
    });

program
    .command('unpublish')
    .description('remove a specific app from the platform')
    .longDescription('This command removes an application from the platform and consequently form mobile devices.')
    .option('-i, --id <app id>', 'application id. To find out what is your application id use "aiq list" command')
    .action(function () {
        //HACK: to support Commander
        var params = arguments[arguments.length - 1],
            id = (params.id || '').trim();

        if (!id) {
            console.error('\n  error: missing required option `id\'');
            params.help();
            process.exit(1);
        }

        services.deleteApp(id).then(function (appInfo) {
            utils.info('App with ID: %s was successfully removed from the platform.', appInfo.id);
        }, utils.error);
    });

program
    .command('run [path]')
    .usage(pathUsage)
    .description('run the app in a local Node.js WebServer')
    .longDescription('This command runs the application on a local web server, so it can be tested in browser in mock mode.')
    .option('-p, --port <n>', 'port number, default is 8000', 8000)
    .action(function (path) {
        //HACK: to support Commander
        var params = arguments[arguments.length - 1];
        services.server(params.port, path).then(function () {
            utils.info('WebServer successfully started at http://localhost:%d/\nPress <CTRL> + <C> to shutdown.', params.port);
        }, utils.error);
    });

if (process.argv.indexOf('--no-update-notifier') === -1) {
    updateNotifier({
        packageName: pkg.name,
        packageVersion: pkg.version,
        updateCheckInterval: 100
    }).notify(true);
}

program.parse(process.argv);
if (!program.args.length) {
    program.help();
}
