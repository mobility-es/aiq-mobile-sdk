#!/usr/bin/env node

'use strict';

var pkg = require('../package.json'),

    Table = require('cli-table'),
    moment = require('moment'),

    url = require('url'),
    path = require('path'),

    program = require('../lib/commander'),
    utils = require('../lib/utils'),
    services = new (require('../lib/services'))(path.join(utils.getUserHome(), '.aiqrc'), process.cwd());

process.title = pkg.name;

var pathUsage = [
        '[<path>]',
        '',
        '    <path>: The path to the application folder. If not specified, the current working directory will be used.'
    ].join('\n');

program
    .option('-v, --version', 'output the AIQ mobile sdk version', function () {
        console.log(pkg.version);
        process.exit(0);
    })
    .on('*', function () {
        console.error('\n  error: command doesn\'t exist `%s\'\n', arguments[0]);
        process.exit(1);
    });

program
    .command('login [serverUrl]')
    .description('authenticate against the platform and stores the access token')
    .longDescription('This command authenticates against the platform and stores the access token.')
    .usage('-o <orgName> -u <username> -p <password> [<serverUrl>]\n\t<serverUrl>  platform URL. If not provided, AIQ development environment (' + pkg.defaults.server + ') will be used') // jshint ignore:line
    .option('-o, --orgName <orgName>', 'organization')
    .option('-u, --username <username>', 'username')
    .option('-p, --password <password>', 'password')
    .action(function (serverUrl) {
        //HACK: in case of wrong call eg. "login -o org -p password -us ername"
        // "arguments" object will contain more that 1 element,
        // i.e. it is not safe to retrieve "params" object as regular func parameter
        var params = arguments[arguments.length - 1],
            protocol = '';

        params.serverUrl = serverUrl || pkg.defaults.server;
        protocol = url.parse(params.serverUrl).protocol;
        if (protocol !== 'https:' && protocol !== 'http:') {
            utils.error('Wrong Server\'s protocol.');
            process.exit(1);
        }

        // Check existence of required options
        params.options.forEach(function (param) {
            var argName = param.long.replace('--', '');
            if (param.required && !params[argName]) {
                console.error('\n  error: missing required option `%s\'\n', param.long);
                process.exit(1);
            }
        });

        services.login(params).then(function () {
            utils.info('AccessToken successfully stored for the future calls.');
        }, utils.error);
    });

program
    .command('logout')
    .description('destroy the stored access token')
    .longDescription('')
    .action(function () {
        services.logout().then(function () {
            utils.info('AccessToken successfully removed.');
        }, utils.error);
    });

program
    .command('list')
    .description('display list of apps on platform')
    .action(function () {
        services.getAppsList().then(function (result) {

            if (!result.length) {
                utils.info('There are no applications in the platform yet.');
                return;
            }

            var table = new Table({
                head: ['ID', 'Rev', 'Name', 'Modified on', 'API', 'Mock?', 'Global?']
            });

            // Apply Name-based sorting
            result.sort(function (a, b) {
                return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
            });

            result.forEach(function (app) {
                table.push([
                    app._id,
                    app._rev,
                    app.name,
                    app.lastModified ? moment(app.lastModified).fromNow() : 'N/A',
                    app.minJsApiLevel || 0,
                    app.mock ? 'Yes'.warn : 'No'.info,
                    app.global ? 'Yes'.warn : 'No'.info
                ]);
            });
            console.log(table.toString());

        }, utils.error);
    });

program
    .command('publish [path]')
    .usage('[options] ' + pathUsage)
    .description('publish a new app to platform')
    .longDescription('This command registers a new application on platform and deploys the content of the application folder as a new app.')
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not have to be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock', 'enable mock mode')
    .option('-g, --global', 'make the application global, so all users in the organization can access it')
    .note('A new app will be always created on platform and the app manifest file will be created/updated according to provided parameters.') // jshint ignore:line
    .action(function (path, params) {
        services.registerApp(path, params).then(function (appInfo) {
            utils.info('New App [%s] with ID: %s was successfully created.', appInfo.name, appInfo.id);
        }, utils.error);
    });

program
    .command('update <id>')
    .usage('[options] <id> ' + pathUsage)
    .description('update an existing app')
    .option('-n, --name <app name>', 'name of the application. If not provided, value from manifest.json file will be used. Note that depending on your organization settings, app name might or might not have to be unique') // jshint ignore:line
    .option('-l, --apiLevel <n>', 'integer value indicating the minimum JS API level. If not provided, value from manifest.json file will be used. Otherwise the default value is 1') // jshint ignore:line
    .option('-m, --mock', 'enable mock mode')
    .option('-g, --global', 'make the application global, so all users in the organization can access it')
    .action(function () {

        //HACK: Commander behaves wrong for the "update _id_" call
        var params = arguments[arguments.length - 1],
            id = arguments[0].trim(),
            path = arguments.length === 3 ? arguments[1] : null;

        if (!id) {
           utils.error('Wrong ID.');
           process.exit(1);
        }

        services.updateApp(id, path, params).then(function (appInfo) {
            utils.info('App [%s] with ID: %s was successfully updated.', appInfo.name, appInfo.id);
        }, utils.error);
    });

program
    .command('unpublish <id> [path]')
    .usage('[options] <id> ' + pathUsage)
    .description('remove specific app from platform')
    .longDescription('This command removes an application from the platform and consequently form mobile devices.')
    .action(function (id, path) {
        id = id.trim();

        if (!id) {
           utils.error('Wrong ID.');
           process.exit(1);
        }

        services.deleteApp(id, path).then(function (appInfo) {
            utils.info('App with ID: %s was successfully removed from the platform.', appInfo.id);
        }, utils.error);
    });

program
    .command('run [path]')
    .usage('[options] ' + pathUsage)
    .description('run the app on a local WebServer')
    .longDescription('This command runs the application on a local web server, so it can be tested in browser in mock mode.')
    .option('-p, --port <n>', 'port number, default is 8000', 8000)
    .action(function (path, params) {
        services.server(params.port, path).then(function () {
            utils.info('WebServer successfully started at http://localhost:%d/\nPress <CTRL> + <C> to shutdown.', params.port);
        }, utils.error);
    });

program.parse(process.argv);

if (!program.args.length) {
    program.help();
}
